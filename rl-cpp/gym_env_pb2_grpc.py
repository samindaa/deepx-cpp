# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import gym_env_pb2 as gym__env__pb2


class GymStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Create = channel.unary_unary(
        '/deepx.Gym/Create',
        request_serializer=gym__env__pb2.CreateRequest.SerializeToString,
        response_deserializer=gym__env__pb2.CreateResponse.FromString,
        )
    self.Reset = channel.unary_unary(
        '/deepx.Gym/Reset',
        request_serializer=gym__env__pb2.ResetRequest.SerializeToString,
        response_deserializer=gym__env__pb2.ResetResponse.FromString,
        )
    self.Step = channel.unary_unary(
        '/deepx.Gym/Step',
        request_serializer=gym__env__pb2.StepRequest.SerializeToString,
        response_deserializer=gym__env__pb2.StepResponse.FromString,
        )
    self.Close = channel.unary_unary(
        '/deepx.Gym/Close',
        request_serializer=gym__env__pb2.CloseRequest.SerializeToString,
        response_deserializer=gym__env__pb2.CloseResponse.FromString,
        )
    self.List = channel.unary_unary(
        '/deepx.Gym/List',
        request_serializer=gym__env__pb2.ListRequest.SerializeToString,
        response_deserializer=gym__env__pb2.ListResponse.FromString,
        )


class GymServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Create(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Reset(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Step(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Close(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def List(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_GymServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Create': grpc.unary_unary_rpc_method_handler(
          servicer.Create,
          request_deserializer=gym__env__pb2.CreateRequest.FromString,
          response_serializer=gym__env__pb2.CreateResponse.SerializeToString,
      ),
      'Reset': grpc.unary_unary_rpc_method_handler(
          servicer.Reset,
          request_deserializer=gym__env__pb2.ResetRequest.FromString,
          response_serializer=gym__env__pb2.ResetResponse.SerializeToString,
      ),
      'Step': grpc.unary_unary_rpc_method_handler(
          servicer.Step,
          request_deserializer=gym__env__pb2.StepRequest.FromString,
          response_serializer=gym__env__pb2.StepResponse.SerializeToString,
      ),
      'Close': grpc.unary_unary_rpc_method_handler(
          servicer.Close,
          request_deserializer=gym__env__pb2.CloseRequest.FromString,
          response_serializer=gym__env__pb2.CloseResponse.SerializeToString,
      ),
      'List': grpc.unary_unary_rpc_method_handler(
          servicer.List,
          request_deserializer=gym__env__pb2.ListRequest.FromString,
          response_serializer=gym__env__pb2.ListResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'deepx.Gym', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
